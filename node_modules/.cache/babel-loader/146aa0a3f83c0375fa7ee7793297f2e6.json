{"ast":null,"code":"import { DateTime } from \"luxon\";\nimport { loadAllGuesses } from \"./guess\";\nexport function getStatsData() {\n  const allGuesses = loadAllGuesses();\n  const allGuessesEntries = Object.entries(allGuesses);\n  const played = allGuessesEntries.length;\n  const guessDistribution = {\n    1: 0,\n    2: 0,\n    3: 0,\n    4: 0,\n    5: 0,\n    6: 0\n  };\n  let currentStreak = 0;\n  let maxStreak = 0;\n  let previousDate;\n  let bestDistanceSum = 0;\n\n  for (const [dayString, guesses] of allGuessesEntries) {\n    bestDistanceSum += Math.min(...guesses.map(guess => guess.distance));\n    const currentDate = DateTime.fromFormat(dayString, \"yyyy-MM-dd\");\n    const winIndex = guesses.findIndex(guess => guess.distance === 0);\n    const won = winIndex >= 0;\n\n    if (won) {\n      const tryCount = winIndex + 1;\n      guessDistribution[tryCount]++;\n\n      if (previousDate == null || previousDate.plus({\n        days: 1\n      }).hasSame(currentDate, \"day\")) {\n        currentStreak++;\n      } else {\n        currentStreak = 1;\n      }\n    } else {\n      currentStreak = 0;\n    }\n\n    if (currentStreak > maxStreak) {\n      maxStreak = currentStreak;\n    }\n\n    previousDate = currentDate;\n  }\n\n  const winCount = Object.values(guessDistribution).reduce((total, tries) => total + tries);\n  return {\n    currentStreak: currentStreak,\n    maxStreak: maxStreak,\n    played,\n    winRatio: winCount / (played || 1),\n    guessDistribution: guessDistribution,\n    averageBestDistance: bestDistanceSum / (played || 1)\n  };\n}","map":{"version":3,"sources":["/Users/adammckenna/github-repos/worldle/src/domain/stats.ts"],"names":["DateTime","loadAllGuesses","getStatsData","allGuesses","allGuessesEntries","Object","entries","played","length","guessDistribution","currentStreak","maxStreak","previousDate","bestDistanceSum","dayString","guesses","Math","min","map","guess","distance","currentDate","fromFormat","winIndex","findIndex","won","tryCount","plus","days","hasSame","winCount","values","reduce","total","tries","winRatio","averageBestDistance"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,cAAT,QAA+B,SAA/B;AAWA,OAAO,SAASC,YAAT,GAAmC;AACxC,QAAMC,UAAU,GAAGF,cAAc,EAAjC;AAEA,QAAMG,iBAAiB,GAAGC,MAAM,CAACC,OAAP,CAAeH,UAAf,CAA1B;AACA,QAAMI,MAAM,GAAGH,iBAAiB,CAACI,MAAjC;AAEA,QAAMC,iBAAiB,GAAG;AACxB,OAAG,CADqB;AAExB,OAAG,CAFqB;AAGxB,OAAG,CAHqB;AAIxB,OAAG,CAJqB;AAKxB,OAAG,CALqB;AAMxB,OAAG;AANqB,GAA1B;AASA,MAAIC,aAAa,GAAG,CAApB;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,YAAJ;AACA,MAAIC,eAAe,GAAG,CAAtB;;AACA,OAAK,MAAM,CAACC,SAAD,EAAYC,OAAZ,CAAX,IAAmCX,iBAAnC,EAAsD;AACpDS,IAAAA,eAAe,IAAIG,IAAI,CAACC,GAAL,CAAS,GAAGF,OAAO,CAACG,GAAR,CAAaC,KAAD,IAAWA,KAAK,CAACC,QAA7B,CAAZ,CAAnB;AACA,UAAMC,WAAW,GAAGrB,QAAQ,CAACsB,UAAT,CAAoBR,SAApB,EAA+B,YAA/B,CAApB;AACA,UAAMS,QAAQ,GAAGR,OAAO,CAACS,SAAR,CAAmBL,KAAD,IAAWA,KAAK,CAACC,QAAN,KAAmB,CAAhD,CAAjB;AACA,UAAMK,GAAG,GAAGF,QAAQ,IAAI,CAAxB;;AACA,QAAIE,GAAJ,EAAS;AACP,YAAMC,QAAQ,GAAIH,QAAQ,GAAG,CAA7B;AACAd,MAAAA,iBAAiB,CAACiB,QAAD,CAAjB;;AAEA,UACEd,YAAY,IAAI,IAAhB,IACAA,YAAY,CAACe,IAAb,CAAkB;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAlB,EAA+BC,OAA/B,CAAuCR,WAAvC,EAAoD,KAApD,CAFF,EAGE;AACAX,QAAAA,aAAa;AACd,OALD,MAKO;AACLA,QAAAA,aAAa,GAAG,CAAhB;AACD;AACF,KAZD,MAYO;AACLA,MAAAA,aAAa,GAAG,CAAhB;AACD;;AAED,QAAIA,aAAa,GAAGC,SAApB,EAA+B;AAC7BA,MAAAA,SAAS,GAAGD,aAAZ;AACD;;AACDE,IAAAA,YAAY,GAAGS,WAAf;AACD;;AAED,QAAMS,QAAQ,GAAGzB,MAAM,CAAC0B,MAAP,CAActB,iBAAd,EAAiCuB,MAAjC,CACf,CAACC,KAAD,EAAQC,KAAR,KAAkBD,KAAK,GAAGC,KADX,CAAjB;AAIA,SAAO;AACLxB,IAAAA,aAAa,EAAEA,aADV;AAELC,IAAAA,SAAS,EAAEA,SAFN;AAGLJ,IAAAA,MAHK;AAIL4B,IAAAA,QAAQ,EAAEL,QAAQ,IAAIvB,MAAM,IAAI,CAAd,CAJb;AAKLE,IAAAA,iBAAiB,EAAEA,iBALd;AAML2B,IAAAA,mBAAmB,EAAEvB,eAAe,IAAIN,MAAM,IAAI,CAAd;AAN/B,GAAP;AAQD","sourcesContent":["import { DateTime } from \"luxon\";\nimport { loadAllGuesses } from \"./guess\";\n\nexport interface StatsData {\n  currentStreak: number;\n  maxStreak: number;\n  played: number;\n  winRatio: number;\n  guessDistribution: Record<1 | 2 | 3 | 4 | 5 | 6, number>;\n  averageBestDistance: number;\n}\n\nexport function getStatsData(): StatsData {\n  const allGuesses = loadAllGuesses();\n\n  const allGuessesEntries = Object.entries(allGuesses);\n  const played = allGuessesEntries.length;\n\n  const guessDistribution = {\n    1: 0,\n    2: 0,\n    3: 0,\n    4: 0,\n    5: 0,\n    6: 0,\n  };\n\n  let currentStreak = 0;\n  let maxStreak = 0;\n  let previousDate: DateTime | undefined;\n  let bestDistanceSum = 0;\n  for (const [dayString, guesses] of allGuessesEntries) {\n    bestDistanceSum += Math.min(...guesses.map((guess) => guess.distance));\n    const currentDate = DateTime.fromFormat(dayString, \"yyyy-MM-dd\");\n    const winIndex = guesses.findIndex((guess) => guess.distance === 0);\n    const won = winIndex >= 0;\n    if (won) {\n      const tryCount = (winIndex + 1) as 1 | 2 | 3 | 4 | 5 | 6;\n      guessDistribution[tryCount]++;\n\n      if (\n        previousDate == null ||\n        previousDate.plus({ days: 1 }).hasSame(currentDate, \"day\")\n      ) {\n        currentStreak++;\n      } else {\n        currentStreak = 1;\n      }\n    } else {\n      currentStreak = 0;\n    }\n\n    if (currentStreak > maxStreak) {\n      maxStreak = currentStreak;\n    }\n    previousDate = currentDate;\n  }\n\n  const winCount = Object.values(guessDistribution).reduce(\n    (total, tries) => total + tries\n  );\n\n  return {\n    currentStreak: currentStreak,\n    maxStreak: maxStreak,\n    played,\n    winRatio: winCount / (played || 1),\n    guessDistribution: guessDistribution,\n    averageBestDistance: bestDistanceSum / (played || 1),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}