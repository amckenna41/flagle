{"ast":null,"code":"const MAX_DISTANCE_ON_EARTH = 20000000;\nconst DIRECTION_ARROWS = {\n  N: \"‚¨ÜÔ∏è\",\n  NNE: \"‚ÜóÔ∏è\",\n  NE: \"‚ÜóÔ∏è\",\n  ENE: \"‚ÜóÔ∏è\",\n  E: \"‚û°Ô∏è\",\n  ESE: \"‚ÜòÔ∏è\",\n  SE: \"‚ÜòÔ∏è\",\n  SSE: \"‚ÜòÔ∏è\",\n  S: \"‚¨áÔ∏è\",\n  SSW: \"‚ÜôÔ∏è\",\n  SW: \"‚ÜôÔ∏è\",\n  WSW: \"‚ÜôÔ∏è\",\n  W: \"‚¨ÖÔ∏è\",\n  WNW: \"‚ÜñÔ∏è\",\n  NW: \"‚ÜñÔ∏è\",\n  NNW: \"‚ÜñÔ∏è\"\n};\nexport function getDirectionEmoji(guess) {\n  return guess.distance === 0 ? \"üéâ\" : DIRECTION_ARROWS[guess.direction];\n}\nexport function computeProximityPercent(distance) {\n  const proximity = Math.max(MAX_DISTANCE_ON_EARTH - distance, 0);\n  return Math.round(proximity / MAX_DISTANCE_ON_EARTH * 100);\n}\nexport function generateSquareCharacters(proximity, theme) {\n  const characters = new Array(5);\n  const greenSquareCount = Math.floor(proximity / 20);\n  const yellowSquareCount = proximity - greenSquareCount * 20 >= 10 ? 1 : 0;\n  characters.fill(\"üü©\", 0, greenSquareCount);\n  characters.fill(\"üü®\", greenSquareCount, greenSquareCount + yellowSquareCount);\n  characters.fill(theme === \"light\" ? \"‚¨ú\" : \"‚¨õ\", greenSquareCount + yellowSquareCount);\n  return characters;\n}\nexport function formatDistance(distanceInMeters, distanceUnit) {\n  const distanceInKm = distanceInMeters / 1000;\n  return distanceUnit === \"km\" ? `${Math.round(distanceInKm)}km` : `${Math.round(distanceInKm * 0.621371)}mi`;\n}","map":{"version":3,"sources":["/Users/adammckenna/github-repos/worldle/src/domain/geography.ts"],"names":["MAX_DISTANCE_ON_EARTH","DIRECTION_ARROWS","N","NNE","NE","ENE","E","ESE","SE","SSE","S","SSW","SW","WSW","W","WNW","NW","NNW","getDirectionEmoji","guess","distance","direction","computeProximityPercent","proximity","Math","max","round","generateSquareCharacters","theme","characters","Array","greenSquareCount","floor","yellowSquareCount","fill","formatDistance","distanceInMeters","distanceUnit","distanceInKm"],"mappings":"AAEA,MAAMA,qBAAqB,GAAG,QAA9B;AAoBA,MAAMC,gBAA2C,GAAG;AAClDC,EAAAA,CAAC,EAAE,IAD+C;AAElDC,EAAAA,GAAG,EAAE,IAF6C;AAGlDC,EAAAA,EAAE,EAAE,IAH8C;AAIlDC,EAAAA,GAAG,EAAE,IAJ6C;AAKlDC,EAAAA,CAAC,EAAE,IAL+C;AAMlDC,EAAAA,GAAG,EAAE,IAN6C;AAOlDC,EAAAA,EAAE,EAAE,IAP8C;AAQlDC,EAAAA,GAAG,EAAE,IAR6C;AASlDC,EAAAA,CAAC,EAAE,IAT+C;AAUlDC,EAAAA,GAAG,EAAE,IAV6C;AAWlDC,EAAAA,EAAE,EAAE,IAX8C;AAYlDC,EAAAA,GAAG,EAAE,IAZ6C;AAalDC,EAAAA,CAAC,EAAE,IAb+C;AAclDC,EAAAA,GAAG,EAAE,IAd6C;AAelDC,EAAAA,EAAE,EAAE,IAf8C;AAgBlDC,EAAAA,GAAG,EAAE;AAhB6C,CAApD;AAmBA,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAyC;AAC9C,SAAOA,KAAK,CAACC,QAAN,KAAmB,CAAnB,GAAuB,IAAvB,GAA8BnB,gBAAgB,CAACkB,KAAK,CAACE,SAAP,CAArD;AACD;AAED,OAAO,SAASC,uBAAT,CAAiCF,QAAjC,EAA2D;AAChE,QAAMG,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASzB,qBAAqB,GAAGoB,QAAjC,EAA2C,CAA3C,CAAlB;AACA,SAAOI,IAAI,CAACE,KAAL,CAAYH,SAAS,GAAGvB,qBAAb,GAAsC,GAAjD,CAAP;AACD;AAED,OAAO,SAAS2B,wBAAT,CACLJ,SADK,EAELK,KAFK,EAGK;AACV,QAAMC,UAAU,GAAG,IAAIC,KAAJ,CAAkB,CAAlB,CAAnB;AACA,QAAMC,gBAAgB,GAAGP,IAAI,CAACQ,KAAL,CAAWT,SAAS,GAAG,EAAvB,CAAzB;AACA,QAAMU,iBAAiB,GAAGV,SAAS,GAAGQ,gBAAgB,GAAG,EAA/B,IAAqC,EAArC,GAA0C,CAA1C,GAA8C,CAAxE;AAEAF,EAAAA,UAAU,CAACK,IAAX,CAAgB,IAAhB,EAAsB,CAAtB,EAAyBH,gBAAzB;AACAF,EAAAA,UAAU,CAACK,IAAX,CAAgB,IAAhB,EAAsBH,gBAAtB,EAAwCA,gBAAgB,GAAGE,iBAA3D;AACAJ,EAAAA,UAAU,CAACK,IAAX,CACEN,KAAK,KAAK,OAAV,GAAoB,GAApB,GAA0B,GAD5B,EAEEG,gBAAgB,GAAGE,iBAFrB;AAKA,SAAOJ,UAAP;AACD;AAED,OAAO,SAASM,cAAT,CACLC,gBADK,EAELC,YAFK,EAGL;AACA,QAAMC,YAAY,GAAGF,gBAAgB,GAAG,IAAxC;AAEA,SAAOC,YAAY,KAAK,IAAjB,GACF,GAAEb,IAAI,CAACE,KAAL,CAAWY,YAAX,CAAyB,IADzB,GAEF,GAAEd,IAAI,CAACE,KAAL,CAAWY,YAAY,GAAG,QAA1B,CAAoC,IAF3C;AAGD","sourcesContent":["import { Guess } from \"./guess\";\n\nconst MAX_DISTANCE_ON_EARTH = 20_000_000;\n\nexport type Direction =\n  | \"S\"\n  | \"W\"\n  | \"NNE\"\n  | \"NE\"\n  | \"ENE\"\n  | \"E\"\n  | \"ESE\"\n  | \"SE\"\n  | \"SSE\"\n  | \"SSW\"\n  | \"SW\"\n  | \"WSW\"\n  | \"WNW\"\n  | \"NW\"\n  | \"NNW\"\n  | \"N\";\n\nconst DIRECTION_ARROWS: Record<Direction, string> = {\n  N: \"‚¨ÜÔ∏è\",\n  NNE: \"‚ÜóÔ∏è\",\n  NE: \"‚ÜóÔ∏è\",\n  ENE: \"‚ÜóÔ∏è\",\n  E: \"‚û°Ô∏è\",\n  ESE: \"‚ÜòÔ∏è\",\n  SE: \"‚ÜòÔ∏è\",\n  SSE: \"‚ÜòÔ∏è\",\n  S: \"‚¨áÔ∏è\",\n  SSW: \"‚ÜôÔ∏è\",\n  SW: \"‚ÜôÔ∏è\",\n  WSW: \"‚ÜôÔ∏è\",\n  W: \"‚¨ÖÔ∏è\",\n  WNW: \"‚ÜñÔ∏è\",\n  NW: \"‚ÜñÔ∏è\",\n  NNW: \"‚ÜñÔ∏è\",\n};\n\nexport function getDirectionEmoji(guess: Guess) {\n  return guess.distance === 0 ? \"üéâ\" : DIRECTION_ARROWS[guess.direction];\n}\n\nexport function computeProximityPercent(distance: number): number {\n  const proximity = Math.max(MAX_DISTANCE_ON_EARTH - distance, 0);\n  return Math.round((proximity / MAX_DISTANCE_ON_EARTH) * 100);\n}\n\nexport function generateSquareCharacters(\n  proximity: number,\n  theme: \"light\" | \"dark\"\n): string[] {\n  const characters = new Array<string>(5);\n  const greenSquareCount = Math.floor(proximity / 20);\n  const yellowSquareCount = proximity - greenSquareCount * 20 >= 10 ? 1 : 0;\n\n  characters.fill(\"üü©\", 0, greenSquareCount);\n  characters.fill(\"üü®\", greenSquareCount, greenSquareCount + yellowSquareCount);\n  characters.fill(\n    theme === \"light\" ? \"‚¨ú\" : \"‚¨õ\",\n    greenSquareCount + yellowSquareCount\n  );\n\n  return characters;\n}\n\nexport function formatDistance(\n  distanceInMeters: number,\n  distanceUnit: \"km\" | \"miles\"\n) {\n  const distanceInKm = distanceInMeters / 1000;\n\n  return distanceUnit === \"km\"\n    ? `${Math.round(distanceInKm)}km`\n    : `${Math.round(distanceInKm * 0.621371)}mi`;\n}\n"]},"metadata":{},"sourceType":"module"}