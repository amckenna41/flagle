{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n\nfunction loadAllModeValues(modeName) {\n  const storedModeValues = localStorage.getItem(modeName);\n  return storedModeValues != null ? JSON.parse(storedModeValues) : {};\n}\n\nexport function useMode(modeName, dayString, defaultValue) {\n  _s();\n\n  var _loadAllModeValues$da;\n\n  const [modeValue, setModeValue] = useState((_loadAllModeValues$da = loadAllModeValues(modeName)[dayString]) !== null && _loadAllModeValues$da !== void 0 ? _loadAllModeValues$da : defaultValue);\n  useEffect(() => {\n    const allModeValues = loadAllModeValues(modeName);\n    localStorage.setItem(modeName, JSON.stringify({ ...allModeValues,\n      [dayString]: modeValue\n    }));\n  }, [dayString, modeName, modeValue]);\n  return [modeValue, setModeValue];\n}\n\n_s(useMode, \"HQ85eLu/hZG5UENboO5LmNZdJWI=\");","map":{"version":3,"sources":["/Users/adammckenna/github-repos/worldle/src/hooks/useMode.ts"],"names":["useEffect","useState","loadAllModeValues","modeName","storedModeValues","localStorage","getItem","JSON","parse","useMode","dayString","defaultValue","modeValue","setModeValue","allModeValues","setItem","stringify"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,SAASC,iBAAT,CAA2BC,QAA3B,EAAsE;AACpE,QAAMC,gBAAgB,GAAGC,YAAY,CAACC,OAAb,CAAqBH,QAArB,CAAzB;AACA,SAAOC,gBAAgB,IAAI,IAApB,GAA2BG,IAAI,CAACC,KAAL,CAAWJ,gBAAX,CAA3B,GAA0D,EAAjE;AACD;;AAED,OAAO,SAASK,OAAT,CACLN,QADK,EAELO,SAFK,EAGLC,YAHK,EAIoC;AAAA;;AAAA;;AACzC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,0BACxCC,iBAAiB,CAACC,QAAD,CAAjB,CAA4BO,SAA5B,CADwC,yEACEC,YADF,CAA1C;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,aAAa,GAAGZ,iBAAiB,CAACC,QAAD,CAAvC;AACAE,IAAAA,YAAY,CAACU,OAAb,CACEZ,QADF,EAEEI,IAAI,CAACS,SAAL,CAAe,EACb,GAAGF,aADU;AAEb,OAACJ,SAAD,GAAaE;AAFA,KAAf,CAFF;AAOD,GATQ,EASN,CAACF,SAAD,EAAYP,QAAZ,EAAsBS,SAAtB,CATM,CAAT;AAWA,SAAO,CAACA,SAAD,EAAYC,YAAZ,CAAP;AACD;;GArBeJ,O","sourcesContent":["import { useEffect, useState } from \"react\";\n\nfunction loadAllModeValues(modeName: string): Record<string, boolean> {\n  const storedModeValues = localStorage.getItem(modeName);\n  return storedModeValues != null ? JSON.parse(storedModeValues) : {};\n}\n\nexport function useMode(\n  modeName: string,\n  dayString: string,\n  defaultValue: boolean\n): [boolean, (modeValue: boolean) => void] {\n  const [modeValue, setModeValue] = useState<boolean>(\n    loadAllModeValues(modeName)[dayString] ?? defaultValue\n  );\n\n  useEffect(() => {\n    const allModeValues = loadAllModeValues(modeName);\n    localStorage.setItem(\n      modeName,\n      JSON.stringify({\n        ...allModeValues,\n        [dayString]: modeValue,\n      })\n    );\n  }, [dayString, modeName, modeValue]);\n\n  return [modeValue, setModeValue];\n}\n"]},"metadata":{},"sourceType":"module"}