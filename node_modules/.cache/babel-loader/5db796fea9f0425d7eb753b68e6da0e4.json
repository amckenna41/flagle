{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport seedrandom from \"seedrandom\";\nimport { countriesWithImage } from \"../domain/countries\";\nconst forcedCountries = {\n  \"2022-02-02\": \"TD\",\n  \"2022-02-03\": \"PY\"\n};\nexport function getDayString() {\n  return DateTime.now().toFormat(\"yyyy-MM-dd\");\n}\nexport function useCountry(dayString) {\n  _s();\n\n  const country = useMemo(() => {\n    const forcedCountryCode = forcedCountries[dayString];\n    const forcedCountry = forcedCountryCode != null ? countriesWithImage.find(country => country.code === forcedCountryCode) : undefined;\n    return forcedCountry !== null && forcedCountry !== void 0 ? forcedCountry : countriesWithImage[Math.floor(seedrandom.alea(dayString)() * countriesWithImage.length)];\n  }, [dayString]);\n  const randomAngle = useMemo(() => seedrandom.alea(dayString)() * 360, [dayString]);\n  const imageScale = useMemo(() => {\n    const normalizedAngle = 45 - randomAngle % 90;\n    const radianAngle = normalizedAngle * Math.PI / 180;\n    return 1 / (Math.cos(radianAngle) * Math.sqrt(2));\n  }, [randomAngle]);\n  return [country, randomAngle, imageScale];\n}\n\n_s(useCountry, \"6encjHIiGcGMBrJcLKrKjagIKxg=\");","map":{"version":3,"sources":["/Users/adammckenna/github-repos/worldle/src/hooks/useCountry.ts"],"names":["DateTime","useMemo","seedrandom","countriesWithImage","forcedCountries","getDayString","now","toFormat","useCountry","dayString","country","forcedCountryCode","forcedCountry","find","code","undefined","Math","floor","alea","length","randomAngle","imageScale","normalizedAngle","radianAngle","PI","cos","sqrt"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,kBAAT,QAA4C,qBAA5C;AAEA,MAAMC,eAAuC,GAAG;AAC9C,gBAAc,IADgC;AAE9C,gBAAc;AAFgC,CAAhD;AAKA,OAAO,SAASC,YAAT,GAAwB;AAC7B,SAAOL,QAAQ,CAACM,GAAT,GAAeC,QAAf,CAAwB,YAAxB,CAAP;AACD;AAED,OAAO,SAASC,UAAT,CAAoBC,SAApB,EAAkE;AAAA;;AACvE,QAAMC,OAAO,GAAGT,OAAO,CAAC,MAAM;AAC5B,UAAMU,iBAAiB,GAAGP,eAAe,CAACK,SAAD,CAAzC;AACA,UAAMG,aAAa,GACjBD,iBAAiB,IAAI,IAArB,GACIR,kBAAkB,CAACU,IAAnB,CACGH,OAAD,IAAaA,OAAO,CAACI,IAAR,KAAiBH,iBADhC,CADJ,GAIII,SALN;AAOA,WACEH,aADF,aACEA,aADF,cACEA,aADF,GAEET,kBAAkB,CAChBa,IAAI,CAACC,KAAL,CAAWf,UAAU,CAACgB,IAAX,CAAgBT,SAAhB,MAA+BN,kBAAkB,CAACgB,MAA7D,CADgB,CAFpB;AAMD,GAfsB,EAepB,CAACV,SAAD,CAfoB,CAAvB;AAiBA,QAAMW,WAAW,GAAGnB,OAAO,CACzB,MAAMC,UAAU,CAACgB,IAAX,CAAgBT,SAAhB,MAA+B,GADZ,EAEzB,CAACA,SAAD,CAFyB,CAA3B;AAKA,QAAMY,UAAU,GAAGpB,OAAO,CAAC,MAAM;AAC/B,UAAMqB,eAAe,GAAG,KAAMF,WAAW,GAAG,EAA5C;AACA,UAAMG,WAAW,GAAID,eAAe,GAAGN,IAAI,CAACQ,EAAxB,GAA8B,GAAlD;AACA,WAAO,KAAKR,IAAI,CAACS,GAAL,CAASF,WAAT,IAAwBP,IAAI,CAACU,IAAL,CAAU,CAAV,CAA7B,CAAP;AACD,GAJyB,EAIvB,CAACN,WAAD,CAJuB,CAA1B;AAMA,SAAO,CAACV,OAAD,EAAUU,WAAV,EAAuBC,UAAvB,CAAP;AACD;;GA9Beb,U","sourcesContent":["import { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport seedrandom from \"seedrandom\";\nimport { countriesWithImage, Country } from \"../domain/countries\";\n\nconst forcedCountries: Record<string, string> = {\n  \"2022-02-02\": \"TD\",\n  \"2022-02-03\": \"PY\",\n};\n\nexport function getDayString() {\n  return DateTime.now().toFormat(\"yyyy-MM-dd\");\n}\n\nexport function useCountry(dayString: string): [Country, number, number] {\n  const country = useMemo(() => {\n    const forcedCountryCode = forcedCountries[dayString];\n    const forcedCountry =\n      forcedCountryCode != null\n        ? countriesWithImage.find(\n            (country) => country.code === forcedCountryCode\n          )\n        : undefined;\n\n    return (\n      forcedCountry ??\n      countriesWithImage[\n        Math.floor(seedrandom.alea(dayString)() * countriesWithImage.length)\n      ]\n    );\n  }, [dayString]);\n\n  const randomAngle = useMemo(\n    () => seedrandom.alea(dayString)() * 360,\n    [dayString]\n  );\n\n  const imageScale = useMemo(() => {\n    const normalizedAngle = 45 - (randomAngle % 90);\n    const radianAngle = (normalizedAngle * Math.PI) / 180;\n    return 1 / (Math.cos(radianAngle) * Math.sqrt(2));\n  }, [randomAngle]);\n\n  return [country, randomAngle, imageScale];\n}\n"]},"metadata":{},"sourceType":"module"}