{"ast":null,"code":"var _jsxFileName = \"/Users/adammckenna/github-repos/worldle/src/components/panels/Stats.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { formatDistance } from \"../../domain/geography\";\nimport { getStatsData } from \"../../domain/stats\";\nimport { Panel } from \"./Panel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Stats(_ref) {\n  _s();\n\n  let {\n    isOpen,\n    close,\n    distanceUnit\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const {\n    played,\n    winRatio,\n    currentStreak,\n    maxStreak,\n    averageBestDistance,\n    guessDistribution\n  } = getStatsData();\n  const maxDistribution = Math.max(...Object.values(guessDistribution));\n  return /*#__PURE__*/_jsxDEV(Panel, {\n    title: t(\"stats.title\"),\n    isOpen: isOpen,\n    close: close,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center\",\n      children: [/*#__PURE__*/_jsxDEV(StatsTile, {\n        value: played,\n        name: t(\"stats.played\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatsTile, {\n        value: Math.round(winRatio * 100),\n        name: t(\"stats.win\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatsTile, {\n        value: currentStreak,\n        name: t(\"stats.currentStreak\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatsTile, {\n        value: maxStreak,\n        name: t(\"stats.maxStreak\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center m-6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col m-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-4xl font-bold text-center\",\n          children: formatDistance(averageBestDistance, distanceUnit)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-lg text-center\",\n          children: t(\"stats.averageBestDistance\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl font-bold\",\n        children: t(\"stats.guessDistribution\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"mx-1\",\n        children: Object.entries(guessDistribution).map(_ref2 => {\n          let [index, count] = _ref2;\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"my-2 flex\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mr-1 font-bold\",\n              children: index\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bg-slate-400\",\n              style: {\n                flex: `0 1 ${Math.round(count / maxDistribution * 100)}%`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"px-1 bg-slate-400 font-bold\",\n              children: count\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 15\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Stats, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c = Stats;\n\nfunction StatsTile(_ref3) {\n  let {\n    value,\n    name\n  } = _ref3;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col m-2 max-w-min\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-3xl font-bold text-center\",\n      children: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center\",\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = StatsTile;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Stats\");\n$RefreshReg$(_c2, \"StatsTile\");","map":{"version":3,"sources":["/Users/adammckenna/github-repos/worldle/src/components/panels/Stats.tsx"],"names":["React","useTranslation","formatDistance","getStatsData","Panel","Stats","isOpen","close","distanceUnit","t","played","winRatio","currentStreak","maxStreak","averageBestDistance","guessDistribution","maxDistribution","Math","max","Object","values","round","entries","map","index","count","flex","StatsTile","value","name"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { formatDistance } from \"../../domain/geography\";\nimport { getStatsData } from \"../../domain/stats\";\nimport { Panel } from \"./Panel\";\n\ninterface StatsProps {\n  isOpen: boolean;\n  close: () => void;\n  distanceUnit: \"km\" | \"miles\";\n}\n\nexport function Stats({ isOpen, close, distanceUnit }: StatsProps) {\n  const { t } = useTranslation();\n  const {\n    played,\n    winRatio,\n    currentStreak,\n    maxStreak,\n    averageBestDistance,\n    guessDistribution,\n  } = getStatsData();\n\n  const maxDistribution = Math.max(...Object.values(guessDistribution));\n  return (\n    <Panel title={t(\"stats.title\")} isOpen={isOpen} close={close}>\n      <div className=\"flex justify-center\">\n        <StatsTile value={played} name={t(\"stats.played\")} />\n        <StatsTile value={Math.round(winRatio * 100)} name={t(\"stats.win\")} />\n        <StatsTile value={currentStreak} name={t(\"stats.currentStreak\")} />\n        <StatsTile value={maxStreak} name={t(\"stats.maxStreak\")} />\n      </div>\n      <div className=\"flex justify-center m-6\">\n        <div className=\"flex flex-col m-2\">\n          <p className=\"text-4xl font-bold text-center\">\n            {formatDistance(averageBestDistance, distanceUnit)}\n          </p>\n          <p className=\"text-lg text-center\">\n            {t(\"stats.averageBestDistance\")}\n          </p>\n        </div>\n      </div>\n      <div>\n        <h3 className=\"text-xl font-bold\">{t(\"stats.guessDistribution\")}</h3>\n        <ul className=\"mx-1\">\n          {Object.entries(guessDistribution).map(([index, count]) => (\n            <li key={index} className=\"my-2 flex\">\n              <div className=\"mr-1 font-bold\">{index}</div>\n              <div\n                className=\"bg-slate-400\"\n                style={{\n                  flex: `0 1 ${Math.round((count / maxDistribution) * 100)}%`,\n                }}\n              />\n              <div className=\"px-1 bg-slate-400 font-bold\">{count}</div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </Panel>\n  );\n}\n\ninterface StatsTileProps {\n  value: number;\n  name: string;\n}\n\nfunction StatsTile({ value, name }: StatsTileProps) {\n  return (\n    <div className=\"flex flex-col m-2 max-w-min\">\n      <p className=\"text-3xl font-bold text-center\">{value}</p>\n      <p className=\"text-center\">{name}</p>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}