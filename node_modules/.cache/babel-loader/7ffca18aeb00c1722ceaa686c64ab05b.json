{"ast":null,"code":"var _jsxFileName = \"/Users/adammckenna/github-repos/worldle/src/components/Game.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { countries, getCountryName, sanitizeCountryName } from \"../domain/countries\";\nimport { useGuesses } from \"../hooks/useGuesses\";\nimport { CountryInput } from \"./CountryInput\";\nimport * as geolib from \"geolib\";\nimport { Share } from \"./Share\";\nimport { Guesses } from \"./Guesses\";\nimport { useTranslation } from \"react-i18next\";\nimport { useMode } from \"../hooks/useMode\";\nimport { getDayString, useCountry } from \"../hooks/useCountry\";\nimport { Twemoji } from \"@teuteuf/react-emoji-render\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MAX_TRY_COUNT = 6;\nexport function Game(_ref) {\n  _s();\n\n  var _guesses;\n\n  let {\n    settingsData\n  } = _ref;\n  const {\n    t,\n    i18n\n  } = useTranslation();\n  const dayString = useMemo(getDayString, []);\n  const countryInputRef = useRef(null);\n  const [country, randomAngle, imageScale] = useCountry(dayString);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [guesses, addGuess] = useGuesses(dayString);\n  const [hideImageMode, setHideImageMode] = useMode(\"hideImageMode\", dayString, settingsData.noImageMode);\n  const [rotationMode, setRotationMode] = useMode(\"rotationMode\", dayString, settingsData.rotationMode);\n  const gameEnded = guesses.length === MAX_TRY_COUNT || ((_guesses = guesses[guesses.length - 1]) === null || _guesses === void 0 ? void 0 : _guesses.distance) === 0;\n  const handleSubmit = useCallback(e => {\n    e.preventDefault();\n    const guessedCountry = countries.find(country => sanitizeCountryName(getCountryName(i18n.resolvedLanguage, country)) === sanitizeCountryName(currentGuess));\n\n    if (guessedCountry == null) {\n      toast.error(t(\"unknownCountry\"));\n      return;\n    }\n\n    const newGuess = {\n      name: currentGuess,\n      distance: geolib.getDistance(guessedCountry, country),\n      direction: geolib.getCompassDirection(guessedCountry, country, (origin, dest) => Math.round(geolib.getRhumbLineBearing(origin, dest) / 45) * 45)\n    };\n    addGuess(newGuess);\n    setCurrentGuess(\"\");\n\n    if (newGuess.distance === 0) {\n      toast.success(t(\"welldone\"), {\n        delay: 2000\n      });\n    }\n  }, [addGuess, country, currentGuess, i18n.resolvedLanguage, t]);\n  useEffect(() => {\n    if (guesses.length === MAX_TRY_COUNT && guesses[guesses.length - 1].distance > 0) {\n      toast.info(getCountryName(i18n.resolvedLanguage, country).toUpperCase(), {\n        autoClose: false,\n        delay: 2000\n      });\n    }\n  }, [country, guesses, i18n.resolvedLanguage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex-grow flex flex-col mx-2\",\n    children: [hideImageMode && !gameEnded && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"border-2 uppercase my-2 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\",\n      type: \"button\",\n      onClick: () => setHideImageMode(false),\n      children: /*#__PURE__*/_jsxDEV(Twemoji, {\n        text: t(\"showCountry\"),\n        options: {\n          className: \"inline-block\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-1\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `max-h-52 m-auto transition-transform duration-700 ease-in dark:invert ${hideImageMode && !gameEnded ? \"h-0\" : \"h-full\"}`,\n        alt: \"country to guess\" // src={`images/countries/${country.code.toLowerCase()}/vector.svg`}\n        ,\n        src: `images/${country.code.toLowerCase()}.svg`,\n        style: rotationMode && !gameEnded ? {\n          transform: `rotate(${randomAngle}deg) scale(${imageScale})`\n        } : {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), rotationMode && !hideImageMode && !gameEnded && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"border-2 uppercase mb-2 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\",\n      type: \"button\",\n      onClick: () => setRotationMode(false),\n      children: /*#__PURE__*/_jsxDEV(Twemoji, {\n        text: t(\"cancelRotation\"),\n        options: {\n          className: \"inline-block\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Guesses, {\n      rowCount: MAX_TRY_COUNT,\n      guesses: guesses,\n      settingsData: settingsData,\n      countryInputRef: countryInputRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-2\",\n      children: gameEnded ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Share, {\n          guesses: guesses,\n          dayString: dayString,\n          settingsData: settingsData,\n          hideImageMode: hideImageMode,\n          rotationMode: rotationMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"underline w-full text-center block mt-4\",\n          href: `https://www.google.com/maps?q=${getCountryName(i18n.resolvedLanguage, country)}+${country.code.toUpperCase()}&hl=${i18n.resolvedLanguage}`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: /*#__PURE__*/_jsxDEV(Twemoji, {\n            text: t(\"showOnGoogleMaps\"),\n            options: {\n              className: \"inline-block\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col\",\n          children: [/*#__PURE__*/_jsxDEV(CountryInput, {\n            inputRef: countryInputRef,\n            currentGuess: currentGuess,\n            setCurrentGuess: setCurrentGuess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"flex items-center justify-center border-2 uppercase my-0.5 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\",\n            type: \"submit\",\n            children: [/*#__PURE__*/_jsxDEV(Twemoji, {\n              text: \"\\uD83C\\uDF0D\",\n              options: {\n                className: \"inline-block\"\n              },\n              className: \"flex items-center justify-center\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"ml-1\",\n              children: t(\"guess\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Game, \"o5D121mCbTS8/tLw6iCEHy2WNN8=\", false, function () {\n  return [useTranslation, useCountry, useGuesses, useMode, useMode];\n});\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/adammckenna/github-repos/worldle/src/components/Game.tsx"],"names":["React","useCallback","useEffect","useMemo","useRef","useState","toast","countries","getCountryName","sanitizeCountryName","useGuesses","CountryInput","geolib","Share","Guesses","useTranslation","useMode","getDayString","useCountry","Twemoji","MAX_TRY_COUNT","Game","settingsData","t","i18n","dayString","countryInputRef","country","randomAngle","imageScale","currentGuess","setCurrentGuess","guesses","addGuess","hideImageMode","setHideImageMode","noImageMode","rotationMode","setRotationMode","gameEnded","length","distance","handleSubmit","e","preventDefault","guessedCountry","find","resolvedLanguage","error","newGuess","name","getDistance","direction","getCompassDirection","origin","dest","Math","round","getRhumbLineBearing","success","delay","info","toUpperCase","autoClose","className","code","toLowerCase","transform"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { toast } from \"react-toastify\";\nimport {\n  countries,\n  getCountryName,\n  sanitizeCountryName,\n} from \"../domain/countries\";\nimport { useGuesses } from \"../hooks/useGuesses\";\nimport { CountryInput } from \"./CountryInput\";\nimport * as geolib from \"geolib\";\nimport { Share } from \"./Share\";\nimport { Guesses } from \"./Guesses\";\nimport { useTranslation } from \"react-i18next\";\nimport { SettingsData } from \"../hooks/useSettings\";\nimport { useMode } from \"../hooks/useMode\";\nimport { getDayString, useCountry } from \"../hooks/useCountry\";\nimport { Twemoji } from \"@teuteuf/react-emoji-render\";\n\nconst MAX_TRY_COUNT = 6;\n\ninterface GameProps {\n  settingsData: SettingsData;\n}\n\nexport function Game({ settingsData }: GameProps) {\n  const { t, i18n } = useTranslation();\n  const dayString = useMemo(getDayString, []);\n\n  const countryInputRef = useRef<HTMLInputElement>(null);\n\n  const [country, randomAngle, imageScale] = useCountry(dayString);\n\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [guesses, addGuess] = useGuesses(dayString);\n  const [hideImageMode, setHideImageMode] = useMode(\n    \"hideImageMode\",\n    dayString,\n    settingsData.noImageMode\n  );\n  const [rotationMode, setRotationMode] = useMode(\n    \"rotationMode\",\n    dayString,\n    settingsData.rotationMode\n  );\n\n  const gameEnded =\n    guesses.length === MAX_TRY_COUNT ||\n    guesses[guesses.length - 1]?.distance === 0;\n\n  const handleSubmit = useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      const guessedCountry = countries.find(\n        (country) =>\n          sanitizeCountryName(\n            getCountryName(i18n.resolvedLanguage, country)\n          ) === sanitizeCountryName(currentGuess)\n      );\n\n      if (guessedCountry == null) {\n        toast.error(t(\"unknownCountry\"));\n        return;\n      }\n\n      const newGuess = {\n        name: currentGuess,\n        distance: geolib.getDistance(guessedCountry, country),\n        direction: geolib.getCompassDirection(\n          guessedCountry,\n          country,\n          (origin, dest) =>\n            Math.round(geolib.getRhumbLineBearing(origin, dest) / 45) * 45\n        ),\n      };\n\n      addGuess(newGuess);\n      setCurrentGuess(\"\");\n\n      if (newGuess.distance === 0) {\n        toast.success(t(\"welldone\"), { delay: 2000 });\n      }\n    },\n    [addGuess, country, currentGuess, i18n.resolvedLanguage, t]\n  );\n\n  useEffect(() => {\n    if (\n      guesses.length === MAX_TRY_COUNT &&\n      guesses[guesses.length - 1].distance > 0\n    ) {\n      toast.info(getCountryName(i18n.resolvedLanguage, country).toUpperCase(), {\n        autoClose: false,\n        delay: 2000,\n      });\n    }\n  }, [country, guesses, i18n.resolvedLanguage]);\n\n  return (\n    <div className=\"flex-grow flex flex-col mx-2\">\n      {hideImageMode && !gameEnded && (\n        <button\n          className=\"border-2 uppercase my-2 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\"\n          type=\"button\"\n          onClick={() => setHideImageMode(false)}\n        >\n          <Twemoji\n            text={t(\"showCountry\")}\n            options={{ className: \"inline-block\" }}\n          />\n        </button>\n      )}\n      <div className=\"my-1\">\n        <img\n          className={`max-h-52 m-auto transition-transform duration-700 ease-in dark:invert ${\n            hideImageMode && !gameEnded ? \"h-0\" : \"h-full\"\n          }`}\n          alt=\"country to guess\"\n          // src={`images/countries/${country.code.toLowerCase()}/vector.svg`}\n          src={`images/${country.code.toLowerCase()}.svg`}\n          style={\n            rotationMode && !gameEnded\n              ? {\n                  transform: `rotate(${randomAngle}deg) scale(${imageScale})`,\n                }\n              : {}\n          }\n        />\n      </div>\n      {rotationMode && !hideImageMode && !gameEnded && (\n        <button\n          className=\"border-2 uppercase mb-2 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\"\n          type=\"button\"\n          onClick={() => setRotationMode(false)}\n        >\n          <Twemoji\n            text={t(\"cancelRotation\")}\n            options={{ className: \"inline-block\" }}\n          />\n        </button>\n      )}\n      <Guesses\n        rowCount={MAX_TRY_COUNT}\n        guesses={guesses}\n        settingsData={settingsData}\n        countryInputRef={countryInputRef}\n      />\n      <div className=\"my-2\">\n        {gameEnded ? (\n          <>\n            <Share\n              guesses={guesses}\n              dayString={dayString}\n              settingsData={settingsData}\n              hideImageMode={hideImageMode}\n              rotationMode={rotationMode}\n            />\n            <a\n              className=\"underline w-full text-center block mt-4\"\n              href={`https://www.google.com/maps?q=${getCountryName(\n                i18n.resolvedLanguage,\n                country\n              )}+${country.code.toUpperCase()}&hl=${i18n.resolvedLanguage}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <Twemoji\n                text={t(\"showOnGoogleMaps\")}\n                options={{ className: \"inline-block\" }}\n              />\n            </a>\n          </>\n        ) : (\n          <form onSubmit={handleSubmit}>\n            <div className=\"flex flex-col\">\n              <CountryInput\n                inputRef={countryInputRef}\n                currentGuess={currentGuess}\n                setCurrentGuess={setCurrentGuess}\n              />\n              <button\n                className=\"flex items-center justify-center border-2 uppercase my-0.5 hover:bg-gray-50 active:bg-gray-100 dark:hover:bg-slate-800 dark:active:bg-slate-700\"\n                type=\"submit\"\n              >\n                <Twemoji\n                  text=\"🌍\"\n                  options={{ className: \"inline-block\" }}\n                  className=\"flex items-center justify-center\"\n                />{\" \"}\n                <span className=\"ml-1\">{t(\"guess\")}</span>\n              </button>\n            </div>\n          </form>\n        )}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}